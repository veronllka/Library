using System;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Media;
using Library.Models;
using Library.Services;

namespace Library.Views
{
    public partial class ReportsWindow : Window
    {
        private readonly ReportService _reportService;

        public ReportsWindow()
        {
            InitializeComponent();
            _reportService = new ReportService();
            InitializeWindow();
        }

        private void InitializeWindow()
        {
            StartDatePicker.SelectedDate = DateTime.Now.AddMonths(-1);
            EndDatePicker.SelectedDate = DateTime.Now;
        }

        private ReportParameters GetReportParameters(ReportType reportType)
        {
            var topCountText = (TopCountComboBox.SelectedItem as ComboBoxItem)?.Content.ToString();
            int topCount = topCountText == "–í—Å–µ" ? 0 : int.Parse(topCountText ?? "10");

            return new ReportParameters
            {
                ReportType = reportType,
                StartDate = StartDatePicker.SelectedDate ?? DateTime.Now.AddMonths(-1),
                EndDate = EndDatePicker.SelectedDate ?? DateTime.Now,
                TopCount = topCount
            };
        }

        private async void GenerateBookPopularityReport_Click(object sender, RoutedEventArgs e)
        {
            await GenerateReportAsync(ReportType.BookPopularity);
        }

        private async void GenerateReaderActivityReport_Click(object sender, RoutedEventArgs e)
        {
            await GenerateReportAsync(ReportType.ReaderActivity);
        }

        private async void GenerateGenreStatisticsReport_Click(object sender, RoutedEventArgs e)
        {
            await GenerateReportAsync(ReportType.GenreStatistics);
        }

        private async Task GenerateReportAsync(ReportType reportType)
        {
            try
            {
                StatusText.Text = "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...";
                SetButtonsEnabled(false);

                var parameters = GetReportParameters(reportType);
                var report = await _reportService.GenerateReportAsync(parameters);

                DisplayReport(report);
                StatusText.Text = "–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω";
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {ex.Message}", "–û—à–∏–±–∫–∞", 
                              MessageBoxButton.OK, MessageBoxImage.Error);
                StatusText.Text = "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞";
            }
            finally
            {
                SetButtonsEnabled(true);
            }
        }

        private void SetButtonsEnabled(bool enabled)
        {
            BookPopularityButton.IsEnabled = enabled;
            ReaderActivityButton.IsEnabled = enabled;
            GenreStatisticsButton.IsEnabled = enabled;
        }

        private void DisplayReport(BaseReport report)
        {
            ReportContentPanel.Children.Clear();
            WelcomeText.Visibility = Visibility.Collapsed;

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
            var titleBlock = new TextBlock
            {
                Text = report.Title,
                FontSize = 20,
                FontWeight = FontWeights.Bold,
                Margin = new Thickness(0, 0, 0, 10)
            };
            ReportContentPanel.Children.Add(titleBlock);

            var descBlock = new TextBlock
            {
                Text = report.Description,
                FontSize = 14,
                Margin = new Thickness(0, 0, 0, 5)
            };
            ReportContentPanel.Children.Add(descBlock);

            var periodBlock = new TextBlock
            {
                Text = $"–ü–µ—Ä–∏–æ–¥: {report.Period}",
                FontSize = 12,
                Foreground = Brushes.Gray,
                Margin = new Thickness(0, 0, 0, 20)
            };
            ReportContentPanel.Children.Add(periodBlock);

            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
            switch (report)
            {
                case BookPopularityReport bookReport:
                    DisplayBookPopularityReport(bookReport);
                    break;
                case ReaderActivityReport readerReport:
                    DisplayReaderActivityReport(readerReport);
                    break;
                case OverdueLoansReport overdueReport:
                    DisplayOverdueLoansReport(overdueReport);
                    break;
                case GenreStatisticsReport genreReport:
                    DisplayGenreStatisticsReport(genreReport);
                    break;
            }
        }

        private void DisplayBookPopularityReport(BookPopularityReport report)
        {
            var statsPanel = new StackPanel { Orientation = Orientation.Horizontal, Margin = new Thickness(0, 0, 0, 20) };
            
            var totalLoansBlock = new TextBlock
            {
                Text = $"üìä –í—Å–µ–≥–æ –≤—ã–¥–∞—á: {report.TotalLoans}",
                FontSize = 14,
                Margin = new Thickness(0, 0, 20, 0)
            };
            statsPanel.Children.Add(totalLoansBlock);

            var booksCountBlock = new TextBlock
            {
                Text = $"üìö –ö–Ω–∏–≥ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {report.Books.Count}",
                FontSize = 14
            };
            statsPanel.Children.Add(booksCountBlock);

            ReportContentPanel.Children.Add(statsPanel);

            var dataGrid = new DataGrid
            {
                ItemsSource = report.Books,
                AutoGenerateColumns = false,
                IsReadOnly = true,
                Height = 400,
                HorizontalScrollBarVisibility = ScrollBarVisibility.Auto,
                VerticalScrollBarVisibility = ScrollBarVisibility.Auto,
                GridLinesVisibility = DataGridGridLinesVisibility.All,
                AlternatingRowBackground = Brushes.LightGray
            };

            dataGrid.Columns.Add(new DataGridTextColumn { Header = "ID", Binding = new Binding("–ö–Ω–∏–≥–∞ID"), Width = 60 });
            dataGrid.Columns.Add(new DataGridTextColumn { Header = "–ù–∞–∑–≤–∞–Ω–∏–µ", Binding = new Binding("–ù–∞–∑–≤–∞–Ω–∏–µ"), Width = 350 });
            dataGrid.Columns.Add(new DataGridTextColumn { Header = "–ê–≤—Ç–æ—Ä", Binding = new Binding("–ê–≤—Ç–æ—Ä–ò–º—è"), Width = 280 });
            dataGrid.Columns.Add(new DataGridTextColumn { Header = "–ñ–∞–Ω—Ä", Binding = new Binding("–ñ–∞–Ω—Ä–ù–∞–∑–≤–∞–Ω–∏–µ"), Width = 150 });
            dataGrid.Columns.Add(new DataGridTextColumn { Header = "–í—ã–¥–∞—á", Binding = new Binding("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–í—ã–¥–∞—á"), Width = 100 });
            dataGrid.Columns.Add(new DataGridTextColumn { Header = "–°—Ç–∞—Ç—É—Å", Binding = new Binding("–°—Ç–∞—Ç—É—Å"), Width = 200 });

            ReportContentPanel.Children.Add(dataGrid);
        }

        private void DisplayReaderActivityReport(ReaderActivityReport report)
        {
            var statsPanel = new StackPanel { Orientation = Orientation.Horizontal, Margin = new Thickness(0, 0, 0, 20) };
            
            var activeReadersBlock = new TextBlock
            {
                Text = $"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∏—Ç–∞—Ç–µ–ª–µ–π: {report.TotalActiveReaders}",
                FontSize = 14,
                Margin = new Thickness(0, 0, 20, 0)
            };
            statsPanel.Children.Add(activeReadersBlock);

            var avgLoansBlock = new TextBlock
            {
                Text = $"üìà –°—Ä–µ–¥–Ω–µ–µ –≤—ã–¥–∞—á: {report.AverageLoansPerReader:F1}",
                FontSize = 14
            };
            statsPanel.Children.Add(avgLoansBlock);

            ReportContentPanel.Children.Add(statsPanel);

            var dataGrid = new DataGrid
            {
                ItemsSource = report.Readers,
                AutoGenerateColumns = false,
                IsReadOnly = true,
                Height = 400,
                HorizontalScrollBarVisibility = ScrollBarVisibility.Auto,
                VerticalScrollBarVisibility = ScrollBarVisibility.Auto,
                GridLinesVisibility = DataGridGridLinesVisibility.All,
                AlternatingRowBackground = Brushes.LightGray
            };

            dataGrid.Columns.Add(new DataGridTextColumn { Header = "ID", Binding = new Binding("–ß–∏—Ç–∞—Ç–µ–ª—åID"), Width = 60 });
            dataGrid.Columns.Add(new DataGridTextColumn { Header = "–§–ò–û", Binding = new Binding("–ò–º—è–ß–∏—Ç–∞—Ç–µ–ª—è"), Width = 300 });
            dataGrid.Columns.Add(new DataGridTextColumn { Header = "–¢–µ–ª–µ—Ñ–æ–Ω", Binding = new Binding("–¢–µ–ª–µ—Ñ–æ–Ω"), Width = 150 });
            dataGrid.Columns.Add(new DataGridTextColumn { Header = "–í—ã–¥–∞—á", Binding = new Binding("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–í—ã–¥–∞—á"), Width = 100 });
            dataGrid.Columns.Add(new DataGridTextColumn { Header = "–ê–∫—Ç–∏–≤–Ω—ã—Ö", Binding = new Binding("–ê–∫—Ç–∏–≤–Ω—ã—Ö–í—ã–¥–∞—á"), Width = 120 });
            dataGrid.Columns.Add(new DataGridTextColumn { Header = "–ü–æ—Å–ª–µ–¥–Ω—è—è –≤—ã–¥–∞—á–∞", Binding = new Binding("–ü–æ—Å–ª–µ–¥–Ω—è—è–í—ã–¥–∞—á–∞") { StringFormat = "dd.MM.yyyy" }, Width = 180 });
            dataGrid.Columns.Add(new DataGridTextColumn { Header = "–°—Ç–∞—Ç—É—Å", Binding = new Binding("–°—Ç–∞—Ç—É—Å–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"), Width = 150 });

            ReportContentPanel.Children.Add(dataGrid);
        }

        private void DisplayOverdueLoansReport(OverdueLoansReport report)
        {
            var statsPanel = new StackPanel { Orientation = Orientation.Horizontal, Margin = new Thickness(0, 0, 0, 20) };
            
            var overdueCountBlock = new TextBlock
            {
                Text = $"‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–∫: {report.TotalOverdueLoans}",
                FontSize = 14,
                Margin = new Thickness(0, 0, 20, 0)
            };
            statsPanel.Children.Add(overdueCountBlock);

            var fineAmountBlock = new TextBlock
            {
                Text = $"üí∞ –®—Ç—Ä–∞—Ñ—ã: {report.TotalOverdueFine:C}",
                FontSize = 14
            };
            statsPanel.Children.Add(fineAmountBlock);

            ReportContentPanel.Children.Add(statsPanel);

            var dataGrid = new DataGrid
            {
                ItemsSource = report.OverdueLoans,
                AutoGenerateColumns = false,
                IsReadOnly = true,
                Height = 400,
                HorizontalScrollBarVisibility = ScrollBarVisibility.Auto,
                VerticalScrollBarVisibility = ScrollBarVisibility.Auto,
                GridLinesVisibility = DataGridGridLinesVisibility.All,
                AlternatingRowBackground = Brushes.LightGray
            };

            dataGrid.Columns.Add(new DataGridTextColumn { Header = "ID", Binding = new Binding("–í—ã–¥–∞—á–∞ID"), Width = 60 });
            dataGrid.Columns.Add(new DataGridTextColumn { Header = "–ö–Ω–∏–≥–∞", Binding = new Binding("–ù–∞–∑–≤–∞–Ω–∏–µ–ö–Ω–∏–≥–∏"), Width = 300 });
            dataGrid.Columns.Add(new DataGridTextColumn { Header = "–ß–∏—Ç–∞—Ç–µ–ª—å", Binding = new Binding("–ò–º—è–ß–∏—Ç–∞—Ç–µ–ª—è"), Width = 200 });
            dataGrid.Columns.Add(new DataGridTextColumn { Header = "–¢–µ–ª–µ—Ñ–æ–Ω", Binding = new Binding("–¢–µ–ª–µ—Ñ–æ–Ω"), Width = 150 });
            dataGrid.Columns.Add(new DataGridTextColumn { Header = "–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏", Binding = new Binding("–î–∞—Ç–∞–í—ã–¥–∞—á–∏") { StringFormat = "dd.MM.yyyy" }, Width = 120 });
            dataGrid.Columns.Add(new DataGridTextColumn { Header = "–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞", Binding = new Binding("–î–∞—Ç–∞–í–æ–∑–≤—Ä–∞—Ç–∞") { StringFormat = "dd.MM.yyyy" }, Width = 120 });
            dataGrid.Columns.Add(new DataGridTextColumn { Header = "–î–Ω–µ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏", Binding = new Binding("–î–Ω–µ–π–ü—Ä–æ—Å—Ä–æ—á–∫–∏"), Width = 120 });
            dataGrid.Columns.Add(new DataGridTextColumn { Header = "–®—Ç—Ä–∞—Ñ", Binding = new Binding("–†–∞–∑–º–µ—Ä–®—Ç—Ä–∞—Ñ–∞") { StringFormat = "C" }, Width = 100 });
            dataGrid.Columns.Add(new DataGridTextColumn { Header = "–°—Ç–∞—Ç—É—Å", Binding = new Binding("–°—Ç–∞—Ç—É—Å–®—Ç—Ä–∞—Ñ–∞"), Width = 150 });

            ReportContentPanel.Children.Add(dataGrid);
        }

        private void DisplayGenreStatisticsReport(GenreStatisticsReport report)
        {
            var statsPanel = new StackPanel { Orientation = Orientation.Horizontal, Margin = new Thickness(0, 0, 0, 20) };
            
            var totalGenresBlock = new TextBlock
            {
                Text = $"üìö –ñ–∞–Ω—Ä–æ–≤: {report.TotalGenres}",
                FontSize = 14,
                Margin = new Thickness(0, 0, 20, 0)
            };
            statsPanel.Children.Add(totalGenresBlock);

            var totalLoansBlock = new TextBlock
            {
                Text = $"üìä –í—Å–µ–≥–æ –≤—ã–¥–∞—á: {report.TotalLoans}",
                FontSize = 14
            };
            statsPanel.Children.Add(totalLoansBlock);

            ReportContentPanel.Children.Add(statsPanel);

            var dataGrid = new DataGrid
            {
                ItemsSource = report.Genres,
                AutoGenerateColumns = false,
                IsReadOnly = true,
                Height = 400,
                HorizontalScrollBarVisibility = ScrollBarVisibility.Auto,
                VerticalScrollBarVisibility = ScrollBarVisibility.Auto,
                GridLinesVisibility = DataGridGridLinesVisibility.All,
                AlternatingRowBackground = Brushes.LightGray
            };

            dataGrid.Columns.Add(new DataGridTextColumn { Header = "ID", Binding = new Binding("–ñ–∞–Ω—ÄID"), Width = 60 });
            dataGrid.Columns.Add(new DataGridTextColumn { Header = "–ù–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞", Binding = new Binding("–ù–∞–∑–≤–∞–Ω–∏–µ–ñ–∞–Ω—Ä–∞"), Width = 200 });
            dataGrid.Columns.Add(new DataGridTextColumn { Header = "–ö–Ω–∏–≥", Binding = new Binding("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–ö–Ω–∏–≥"), Width = 100 });
            dataGrid.Columns.Add(new DataGridTextColumn { Header = "–í—ã–¥–∞—á", Binding = new Binding("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–í—ã–¥–∞—á"), Width = 100 });
            dataGrid.Columns.Add(new DataGridTextColumn { Header = "–ü—Ä–æ—Ü–µ–Ω—Ç (%)", Binding = new Binding("–ü—Ä–æ—Ü–µ–Ω—Ç") { StringFormat = "F1" }, Width = 120 });
            dataGrid.Columns.Add(new DataGridTextColumn { Header = "–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å", Binding = new Binding("–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å–£—Ä–æ–≤–µ–Ω—å"), Width = 150 });

            ReportContentPanel.Children.Add(dataGrid);
        }
    }
} 